{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"CRA로 TypeScript와 React, CSS로 TailwindCSS를 세팅해보자. 1. Create React App(CRA)  2. TailwindCSS 설치하기 \nor\n 으로 패키지를 개발 종속성으로 추가한다. 3. TailwindCSS config 파일 초기화  4. TailwindCSS 적용 src/index.css 상단에 를 추가해준다.","fields":{"slug":"/CRA로 Typescript 세팅하기/"},"frontmatter":{"date":"June 24, 2023","title":"TypeScript + TailwindCSS로 프로젝트 시작하기","tags":["ReactJS","TypeScript","CRA","TailwindCSS","Blog"]},"rawMarkdownBody":"\r\nCRA로 TypeScript와 React, CSS로 TailwindCSS를 세팅해보자.\r\n\r\n## 1. Create React App(CRA)\r\n\r\n> `npx create-react-app 프로젝트명 --template typescript`\r\n\r\n## 2. TailwindCSS 설치하기\r\n\r\n> `yarn add -D tailwindcss postcss autoprefixer`\r\n> or\r\n> `npm i -D tailwindcss postcss autoprefixer`\r\n\r\n- `D 옵션`으로 패키지를 개발 종속성으로 추가한다.\r\n\r\n## 3. TailwindCSS config 파일 초기화\r\n\r\n`yarn tailwind init -p`\r\n\r\n```Javascript\r\n./tailwind.config.js\r\n\r\nmodule.exports = {\r\n  content: [\r\n  \t\"./src/**/*.{js,jsx,ts,tsx}\",\r\n    // src 하위 파일 중 확장자가 .js,.jsx,.ts,.tsx인 파일을 대상으로 한다는 의미\r\n  ],\r\n  theme: {\r\n    extend: {},\r\n  },\r\n  plugins: [],\r\n}\r\n```\r\n\r\n## 4. TailwindCSS 적용\r\n\r\nsrc/index.css 상단에\r\n\r\n```Css\r\n@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n```\r\n\r\n를 추가해준다.\r\n"},{"excerpt":"","fields":{"slug":"/230624운동기록/"},"frontmatter":{"date":"June 24, 2023","title":"6.24일 무슨 운동을 했나","tags":["오운완","Blog","GM369"]},"rawMarkdownBody":"\r\n![6.24일 기록](workout.png)\r\n"},{"excerpt":"CRA없이 TypeScript와 React를 세팅하는 방법이다. 1. package.json 생성 으로 package.json을 생성한다   2. Eslint eslint란 코드 점검 도구를 말한다. 직접 설정하면 팀원간 의견 충돌이 있으니 prettier에 위임한다.  를 생성한다. 3. Prettier  를 생성한후 를 넣어 기본세팅을 완료한다. 는 …","fields":{"slug":"/Typescript로 프로젝트 세팅하기/"},"frontmatter":{"date":"June 23, 2023","title":"TypeScript로 프로젝트 세팅하기","tags":["ReactJS","TypeScript","Setting","Blog"]},"rawMarkdownBody":"\r\nCRA없이 TypeScript와 React를 세팅하는 방법이다.\r\n\r\n## 1. package.json 생성\r\n\r\n- `npm init`으로 package.json을 생성한다\r\n- `npm i react react-dom`\r\n- `npm i typescript @types/react @types/react-dom`\r\n\r\n## 2. Eslint\r\n\r\n### eslint란\r\n\r\n- 코드 점검 도구를 말한다. 직접 설정하면 팀원간 의견 충돌이 있으니 prettier에 위임한다.\r\n- `npm i -D eslint`\r\n- `.eslintrc`를 생성한다.\r\n\r\n```json\r\n/.eslintrc\r\n{\r\n  \"extends\": [\"plugin:prettier/recommended\"]\r\n}\r\n```\r\n\r\n## 3. Prettier\r\n\r\n- `npm i -D prettier eslint-plugin-prettier eslint-config-prettier`\r\n- `.prettierrc`를 생성한후\r\n\r\n```json\r\n/.prettierrc\r\n{\r\n  \"printWidth\": 120,\r\n  \"tabWidth\": 2,\r\n  \"singleQuote\": true,\r\n  \"trailingComma\": \"all\",\r\n  \"semi\": true\r\n}\r\n```\r\n\r\n를 넣어 기본세팅을 완료한다.\r\n\r\n- `tabWidth`는 개행시 띄워지는 정도를 의미하고 `printWidth`는 한줄에 120이하까지만 적용시키겠다는 의미이다.\r\n\r\n## 4. TypeScript 설정\r\n\r\n- 언어 문법과 JavaScript 결과물이 어떻게 나와야하는지 설정하는 파일\r\n- TypeScript 설정파일인 tsconfig.json파일을 생성한\r\n\r\n```json\r\n./tsconfig.json\r\n{\r\n  \"compilerOptions\": {\r\n    \"esModuleInterop\": true,\r\n    \"sourceMap\": true,\r\n    \"lib\": [\"ES2020\", \"DOM\"],\r\n    \"jsx\": \"react\",\r\n    \"module\": \"esnext\",\r\n    \"moduleResolution\": \"Node\",\r\n    \"target\": \"es5\",\r\n    \"strict\": true, // true로 켜놓아야 타입을 체킹한다.\r\n    \"resolveJsonModule\": true,\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@hooks/*\": [\"hooks/*\"],\r\n      \"@components/*\": [\"components/*\"],\r\n      \"@layouts/*\": [\"layouts/*\"],\r\n      \"@pages/*\": [\"pages/*\"],\r\n      \"@utils/*\": [\"utils/*\"],\r\n      \"@typings/*\": [\"typings/*\"]\r\n    }\r\n  },\r\n  \"ts-node\": {\r\n    \"compilerOptions\": {\r\n      \"module\": \"commonjs\",\r\n      \"moduleResolution\": \"Node\",\r\n      \"target\": \"es5\",\r\n      \"esModuleInterop\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## 5. Webpack 설정\r\n\r\n- ts, css, json, 최신 문법의 js파일들을 하나로 합쳐준다.\r\n- entry에서 파일을 선택하면 module에 정해진 rules대로 js로 변환하여 하나의 파일로 합쳐준다(output). plugins는 합치는 중 부가적인 효과를 준다.\r\n- ts는 babel-loader로, css는 style-loader와 css-loader를 통해 js로 변환한다.\r\n- babel에서는 @babel/preset-env(최신문법 전환) @babel/preset-react(리엑트 jsx 변환), @babel/preset-typescript(타입스크립트 변환)\r\n- publicPath가 /dist고 [name].js에서 [name]이 entry에 적힌대로 app으로 바뀌어 /dist/app.js가 결과물이 된다.\r\n- `npm i -D webpack @types/webpack @types/node`\r\n- `npm i -D css-loader style-loader @babel/core babel-loader @babel/preset-env @babel/preset-react @babel/preset-typescript`\r\n- `npm i style-loader css-loader`\r\n\r\n```Typescript\r\n./webpack.config.ts\r\n\r\nimport path from 'path';\r\nimport ReactRefreshWebpackPlugin from '@pmmmwh/react-refresh-webpack-plugin';\r\nimport webpack, { Configuration as WebpackConfiguration } from 'webpack';\r\nimport { Configuration as WebpackDevServerConfiguration } from 'webpack-dev-server';\r\n\r\ninterface Configuration extends WebpackConfiguration {\r\n  devServer?: WebpackDevServerConfiguration;\r\n}\r\n\r\nimport ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';\r\n\r\nconst isDevelopment = process.env.NODE_ENV !== 'production';\r\n\r\nconst config: Configuration = {\r\n  name: 'sleact',\r\n  mode: isDevelopment ? 'development' : 'production',\r\n  devtool: !isDevelopment ? 'hidden-source-map' : 'eval',\r\n  resolve: {\r\n    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],\r\n    alias: {\r\n      '@hooks': path.resolve(__dirname, 'hooks'),\r\n      '@components': path.resolve(__dirname, 'components'),\r\n      '@layouts': path.resolve(__dirname, 'layouts'),\r\n      '@pages': path.resolve(__dirname, 'pages'),\r\n      '@utils': path.resolve(__dirname, 'utils'),\r\n      '@typings': path.resolve(__dirname, 'typings'),\r\n    },\r\n  },\r\n  entry: {\r\n    app: './client',\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.tsx?$/,\r\n        loader: 'babel-loader',\r\n        options: {\r\n          presets: [\r\n            [\r\n              '@babel/preset-env',\r\n              {\r\n                targets: { browsers: ['IE 10'] },\r\n                debug: isDevelopment,\r\n              },\r\n            ],\r\n            '@babel/preset-react',\r\n            '@babel/preset-typescript',\r\n          ],\r\n          env: {\r\n            development: {\r\n              plugins: [require.resolve('react-refresh/babel')],\r\n            },\r\n          },\r\n        },\r\n        exclude: path.join(__dirname, 'node_modules'),\r\n      },\r\n      {\r\n        test: /\\.css?$/,\r\n        use: ['style-loader', 'css-loader'],\r\n      },\r\n    ],\r\n  },\r\n  plugins: [\r\n    new ForkTsCheckerWebpackPlugin({\r\n      async: false,\r\n      // eslint: {\r\n      //   files: \"./src/**/*\",\r\n      // },\r\n    }),\r\n    new webpack.EnvironmentPlugin({ NODE_ENV: isDevelopment ? 'development' : 'production' }),\r\n  ],\r\n  output: {\r\n    path: path.join(__dirname, 'dist'),\r\n    filename: '[name].js',\r\n    publicPath: '/dist/',\r\n  },\r\n  devServer: {\r\n    historyApiFallback: true, // react router\r\n    port: 3090,\r\n    devMiddleware: { publicPath: '/dist/' },\r\n    static: { directory: path.resolve(__dirname) },\r\n    proxy: {\r\n      '/api/': {\r\n        target: 'http://localhost:8080', //post보낼 api주소를 작성한다.\r\n        changeOrigin: true,\r\n      },\r\n    }, //proxy를 api주소로 설정해준다.\r\n  },\r\n};\r\n\r\nif (isDevelopment && config.plugins) {\r\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\r\n  config.plugins.push(new ReactRefreshWebpackPlugin());\r\n}\r\nif (!isDevelopment && config.plugins) {\r\n}\r\n\r\nexport default config;\r\n```\r\n\r\n## 6. index.html 작성\r\n\r\n```Html\r\n./index.html\r\n\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\"\r\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>타이틀</title>\r\n    <style>\r\n      html, body {\r\n          margin: 0;\r\n          padding: 0;\r\n          overflow: initial !important;\r\n      }\r\n      body {\r\n          font-size: 15px;\r\n          line-height: 1.46668;\r\n          font-weight: 400;\r\n          font-variant-ligatures: common-ligatures;\r\n          -moz-osx-font-smoothing: grayscale;\r\n          -webkit-font-smoothing: antialiased;\r\n      }\r\n      * {\r\n          box-sizing: border-box;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div id=\"app\"></div>\r\n    <script src=\"/dist/app.js\"></script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n```Typescript\r\n./Client.tsx\r\n\r\nimport 'core-js/stable';\r\nimport 'regenerator-runtime/runtime';\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from '@layouts/App';\r\n\r\nrender(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.querySelector('#app'),\r\n);\r\n```\r\n\r\n## 7. tsconfig-for-webpack-config.json\r\n\r\n- `npm i cross-env`\r\n- webpack할 때 webpack.config.ts를 인식 못하는 문제\r\n- package.json의 scripts의 build를 cross-env TS_NODE_PROJECT=\\\"tsconfig-for-webpack-config.json\\\" webpack\r\n\r\n```Json\r\n./package.json\r\n\r\n\"scripts\": {\r\n    \"dev\": \"webpack serve --env development\",\r\n    \"build\": \"cross-env NODE_ENV=production webpack\"\r\n  },\r\n```\r\n\r\n- `npm run build`\r\n- index.html 실행해보기\r\n\r\n```Json\r\n./tsconfig-for-webpack-config.json\r\n\r\n{\r\n  \"compilerOptions\": {\r\n    \"module\": \"commonjs\",\r\n    \"moduleResolution\": \"Node\",\r\n    \"target\": \"es5\",\r\n    \"esModuleInterop\": true\r\n  }\r\n}\r\n```\r\n\r\n## 8. Webpack Dev 서버 설치\r\n\r\n- 개발용 서버인 devServer 옵션 추가(port는 3090, publicPath는 /dist/로)\r\n- webpack serve할 때 webpack.config.ts를 인식 못하는 문제\r\n- `npm i -D ts-node webpack-dev-server @types/webpack-dev-server webpack-cli`\r\n- package.json의 scripts의 dev를 cross-env TS_NODE_PROJECT=\\\"tsconfig-for-webpack-config.json\\\" webpack serve --env development\r\n\r\n```Json\r\n./package.json\r\n\r\n\"scripts\": {\r\n    \"dev\": \"webpack serve --env development\",\r\n    \"build\": \"cross-env NODE_ENV=production webpack\"\r\n  },\r\n```\r\n\r\n- npm run dev하면 localhost:3090에서 서버 실행됨.\r\n\r\n## 9. Hot reloading 설정\r\n\r\n- 새로고침 하면 자동으로 업데이트 되는 기능\r\n- CRA에서는 자동으로 내장되어있지만, 원래는 일일이 설정해줘야하는 기능이다.\r\n- `npm i -D @pmmmwh/react-refresh-webpack-plugin react-refresh`\r\n- webpack의 babel-loader 안에 설정(env) 및 plugin으로 추가\r\n\r\n```Typescript\r\n./webpack.config.ts\r\n\r\n...\r\n...\r\n...\r\n\r\nmodule: {\r\n    rules: [\r\n      {\r\n        test: /\\.tsx?$/,\r\n        loader: 'babel-loader',\r\n        options: {\r\n          presets: [\r\n            [\r\n              '@babel/preset-env',\r\n              {\r\n                targets: { browsers: ['IE 10'] },\r\n                debug: isDevelopment,\r\n              },\r\n            ],\r\n            '@babel/preset-react',\r\n            '@babel/preset-typescript',\r\n          ],\r\n          env: {\r\n            development: {\r\n              plugins: [require.resolve('react-refresh/babel')],\r\n            },\r\n          },\r\n        },\r\n        exclude: path.join(__dirname, 'node_modules'),\r\n      },\r\n      {\r\n        test: /\\.css?$/,\r\n        use: ['style-loader', 'css-loader'],\r\n      },\r\n    ],\r\n  },\r\n...\r\n...\r\n...\r\n```\r\n\r\n## 10. fork-ts-checker-webpack-plugin\r\n\r\n- webpack은 ts체크 후 eslint체크 후 빌드 시작\r\n- ts랑 eslint는 동시에 체크하면 더 효율적이다.\r\n- 이 플러그인이 동시에 진행하게 해준다.\r\n\r\n```Typescript\r\n./webpack.config.ts\r\n\r\nimport ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';\r\n...\r\n...\r\n...\r\nplugins: [\r\n    new ForkTsCheckerWebpackPlugin({\r\n      async: false,\r\n      // eslint: {\r\n      //   files: \"./src/**/*\",\r\n      // },\r\n    }),\r\n    new webpack.EnvironmentPlugin({ NODE_ENV: isDevelopment ? 'development' : 'production' }),\r\n  ],\r\n...\r\n...\r\n...\r\n```\r\n\r\n## 11. 폴더 구조는 취향대로 세팅한다.\r\n\r\n- pages\r\n- components\r\n- hooks\r\n- utils\r\n\r\n크게 위와같이 구분할 수 있다. 폴더 이름과 구조는 개개인마다 다르니 그때마다 새로운 시도를 해보자.\r\n\r\n## 12. ts와 webpack에서 alias 지정\r\n\r\n- `npm i -D tsconfig-paths`\r\n- tsconfig에서 baseUrl와 paths 설정\r\n- webpack에서는 resolve안에 alias 설정\r\n\r\n```json\r\n./tsconfig.json\r\n\r\n...\r\n...\r\n...\r\n\r\n\"paths\": {\r\n      \"@hooks/*\": [\"hooks/*\"],\r\n      \"@components/*\": [\"components/*\"],\r\n      \"@layouts/*\": [\"layouts/*\"],\r\n      \"@pages/*\": [\"pages/*\"],\r\n      \"@utils/*\": [\"utils/*\"],\r\n      \"@typings/*\": [\"typings/*\"]\r\n    }\r\n...\r\n...\r\n...\r\n```\r\n\r\n와 같이 설정할 수 있고, src폴더안에 페이지 구조를 담는다면 src를 앞에 추가해준다.\r\n\r\n## 13. 부가적인 기능들 세팅\r\n\r\nRouterDom\r\n\r\n- `npm i react-router react-router-dom`\r\n- `npm i -D @types/react-router @types/react-router-dom`\r\n- `npm i axios`\r\n\r\n- CSS는 취향대로 사용한다.\r\n  - 개인적으로 나는 TailwindCSS, Styled-Component를 주로 사용한다.\r\n  - TailwindCSS를 적용시키는 방법은 추후에 다시 설명하도록 하겠다.\r\n"},{"excerpt":"가슴보다 어깨에 치중해서 훈련했다. OHP를 오랫만에 해서 RM이 다 줄어버렸다. 50X3도 힘들다니...","fields":{"slug":"/230622운동기록/"},"frontmatter":{"date":"June 22, 2023","title":"6.22일 무슨 운동을 했나","tags":["오운완","Blog","GM369"]},"rawMarkdownBody":"\r\n![6.22일 기록](workout.jpg)\r\n\r\n- 가슴보다 어깨에 치중해서 훈련했다.\r\n- OHP를 오랫만에 해서 RM이 다 줄어버렸다. 50X3도 힘들다니...\r\n"},{"excerpt":"드디어 견갑을 제대로 사용하게된거같다. 자극이 평소와 다름 뭔가 방법을 찾은거 같아서 기분이 좋다.","fields":{"slug":"/230621운동기록/"},"frontmatter":{"date":"June 21, 2023","title":"6.21일 무슨 운동을 했나","tags":["오운완","Blog","GM369"]},"rawMarkdownBody":"\r\n![6.21일 기록](workout.jpg)\r\n\r\n- 드디어 견갑을 제대로 사용하게된거같다. 자극이 평소와 다름\r\n- 뭔가 방법을 찾은거 같아서 기분이 좋다.\r\n"},{"excerpt":"","fields":{"slug":"/230620운동기록/"},"frontmatter":{"date":"June 20, 2023","title":"6.20일 무슨 운동을 했나","tags":["오운완","Blog","GM369"]},"rawMarkdownBody":"\r\n![6.20일 기록](workout.jpg)\r\n"},{"excerpt":"GM369 루틴을 따라가기로 했다. 근비대, 스트랭스는 못참지","fields":{"slug":"/230619운동기록/"},"frontmatter":{"date":"June 19, 2023","title":"6.19일 무슨 운동을 했나","tags":["오운완","Blog","GM369"]},"rawMarkdownBody":"\r\n![6.19일 기록](workout.jpg)\r\n\r\n- GM369 루틴을 따라가기로 했다.\r\n- 근비대, 스트랭스는 못참지\r\n"},{"excerpt":"GM369 루틴을 따라가기로 했다. 근비대, 스트랭스는 못참지","fields":{"slug":"/230617운동기록/"},"frontmatter":{"date":"June 17, 2023","title":"6.17일 무슨 운동을 했나","tags":["오운완","Blog","GM369"]},"rawMarkdownBody":"\r\n![6.17일 기록](workout.png)\r\n\r\n- GM369 루틴을 따라가기로 했다.\r\n- 근비대, 스트랭스는 못참지\r\n"}]}},"pageContext":{}},"staticQueryHashes":[]}